Program	epsilon, int, void
Declaration-list	epsilon, int, void
Var-declaration-prime	;, [
Fun-declaration-prime	(
Type-specifier	int, void
Params	int, void
Param-list	,, epsilon
Param-prime	[, epsilon
Compound-stmt	{
Statement-list	epsilon, break, ;, ID, (, NUM, if, return, {, repeat
Expression-stmt	break, ;, ID, (, NUM
Selection-stmt	if
Else-stmt	endif, else
Iteration-stmt	repeat
Return-stmt	return
Return-stmt-prime	;, ID, (, NUM
Expression	ID, (, NUM
B	=, [, (, epsilon, *, +, -, <, ==
H	=, *, epsilon, +, -, <, ==
C	epsilon, <, ==
Relop	<, ==
D	epsilon, +, -
Addop	+, -
G	*, epsilon
Factor	(, ID, NUM
Var-call-prime	(, [, epsilon
Var-prime	[, epsilon
Factor-prime	(, epsilon
Factor-zegond	(, NUM
Args	epsilon, ID, (, NUM
Arg-list-prime	,, epsilon
Declaration-initial	int, void
Declaration-prime	(, ;, [
Term	(, ID, NUM
Term-prime	(, epsilon, *
Term-zegond	(, NUM
Declaration	int, void
Param	int, void
Additive-expression	(, ID, NUM
Additive-expression-zegond	(, NUM
Simple-expression-zegond	(, NUM
Additive-expression-prime	(, epsilon, *, +, -
Simple-expression-prime	(, epsilon, *, +, -, <, ==
Arg-list	ID, (, NUM
Statement	break, ;, ID, (, NUM, if, return, {, repeat
